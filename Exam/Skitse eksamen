from scipy.optimize import minimize, root
import numpy as np

# Define your parameters
alpha = 0.5
kappa = 1.0
nu = 1/(2*16**2)
w = 1.0
parameters_sets = [(1.001, 1.001, 1.0), (1.5, 1.5, 1.0)]

# Define utility function
def utility(L, w, tau, G, alpha, kappa, nu, sigma, rho, epsilon):
    C = kappa + (1 - tau)*w*L
    U = ((alpha * C**((sigma-1)/sigma) + (1-alpha) * G**((sigma-1)/sigma))**(sigma/(sigma-1)))**(1-rho)/(1-rho) - nu * L**(1+epsilon) / (1+epsilon)
    return -U  # We return negative utility because scipy's minimize function minimizes the function

# Define G condition function
def G_condition(G, w, tau, L):
    return G - tau * w * L

# Iterate over each set of parameters
for sigma, rho, epsilon in parameters_sets:
    max_utility = -np.inf  # Initialize maximum utility
    optimal_tau = None  # Initialize optimal tax rate
    optimal_L = None  # Initialize optimal labor supply
    optimal_G = None  # Initialize optimal public good provision

    # Grid search over possible tax rates
    for tau in np.linspace(0, 1, 100):
        # Initial guess for G
        G = 1
        
        # First step: solve the worker problem for a given tau
        result_L = minimize(utility, x0=1, args=(w, tau, G, alpha, kappa, nu, sigma, rho, epsilon), bounds=[(0, 24)])
        if result_L.success:
            L_star = result_L.x[0]

            # Second step: find the correct G based on the condition
            result_G = root(G_condition, x0=1, args=(w, tau, L_star))
            if result_G.success:
                G_star = result_G.x[0]

                # Compute utility and update maximum utility and optimal tax rate if necessary
                U = -utility(L_star, w, tau, G_star, alpha, kappa, nu, sigma, rho, epsilon)
                if U > max_utility:
                    max_utility = U
                    optimal_tau = tau
                    optimal_L = L_star
                    optimal_G = G_star

    print('Set:', (sigma, rho, epsilon))
    print('Optimal tax rate tau*:', f'{optimal_tau:.2f}')
    print('Optimal labor supply L*:', f'{optimal_L:.2f}')
    print('Optimal public good provision G*:', f'{optimal_G:.2f}')
    print()
